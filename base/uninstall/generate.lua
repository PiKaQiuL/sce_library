---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by meiqi.
--- DateTime: 2024/4/28 11:55
---
local download_manager = require 'update.download_manager'
local local_version = require 'update.core.local_version'
local global_client_suffix = local_version.global_client_suffix
local co = require '@base.base.co'
local generate = {}
local map_ref = { formal = {}, test = {}}
local items = {formal = {}, test = {}}
-- 引用计数计算的结果
local counts = {formal = {}, test = {}}

function generate:request_update_info(game_ids, tag)
	local need_request_games = {}
	for i, game_id in ipairs(game_ids) do
		if not self:get_game_info(tag, game_id) then
			table.insert(need_request_games, game_id)
		end
	end
	if #need_request_games == 0 then
		return
	end
	if not self.http_domain then
		self.http_domain = download_manager:http_address()
	end
	local url = self.http_domain .. 'update-info'
	local list_str = table.concat(need_request_games, ';')
	local input = {
		list = list_str,
		sample = 0,
		default_part = 1,
		suffix = global_client_suffix,
		tag = tag,
		version = 2
	}
	local output = sce.httplib.create_stream()
	local code, status_code = co.call(sce.httplib.request, {
		method = 'post',
		url = url,
		input = input,
		output = output,
	})
	if code ~= 0 or status_code ~= 200 then
		log.errorf('[uninstall] update_version_info failed. code[%s], status_code[%s]', code, status_code)
	end
	local content = output:read()
	local readline = (function()
		local begin = 1
		return function()
			local index = content:find('\r\n', begin)
			if index then
				local ret = content:sub(begin, index)
				begin = index + 2
				return ret
			else
				local ret = nil
				if begin ~= #content then
					ret = content:sub(begin, #content)
				end
				begin = #content
				return ret
			end
		end
	end)()
	readline()
	readline()
	local line_pac = readline()
	local suc, info = pcall(json.decode, line_pac)
	if suc then
		local ref_items = info['ref_items']
		local items_list = info['items']
		for game_id, ref_list in pairs(ref_items) do
			map_ref[tag][game_id] = ref_list
		end
		for i, v in ipairs(items_list) do
			items[tag][v.name..'-'..v.version] = v
			if v['api_version'] ~= -1 and v['variation'] ~= 'server' then
				local oldPath = v['path']
				local prefix = string.gsub(oldPath, "Res", "Res/_m") .. '/' .. v['name']
				local newPath = prefix .. '/' .. tostring(v['version'])
				newPath = string.gsub(newPath, '//', '/')
				v['path'] = newPath
			end
		end
	end
end

function generate:get_game_info(tag, game_id)
	return map_ref[tag] and map_ref[tag][game_id]
end

function generate:remove_game_info(tag, game_id)
	if map_ref[tag] then
		map_ref[tag][game_id] = nil
	end
end

function generate:get_item(tag, item_name, version)
	return items[tag] and items[tag][item_name..'-'..version]
end

function generate:get_item_size(tag, item_name, version)
	local item = self:get_item(tag, item_name, version)
	if item then
		return item.original_size
	end
	return 0
end

function generate:calculate_map_size(tag, game_id)
	local game_info = self:get_game_info(tag, game_id)
	local size = 0
	if game_info then
		for i, v in pairs(game_info) do
			size = size + self:get_item_size(tag, v.name, v.version)
		end
	end
	return size
end

---计算引用计数
function generate:calculate_count(tag)
	counts[tag] = {}
	for game_id, ref_list in pairs(map_ref[tag]) do
		for i, v in ipairs(ref_list) do
			local count = counts[tag][v.name..'-'..v.version] or 0
			counts[tag][v.name..'-'..v.version] = count + 1
		end
	end
end

function generate:get_count(tag, name, version)
	return counts[tag] and counts[tag][name..'-'..version] or 0
end

return generate