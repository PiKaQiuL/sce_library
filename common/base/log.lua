---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xindong.
--- DateTime: 2021/5/11 20:18
---

local EMessageBox
if __lua_state_name == 'StateEditor' then
    EMessageBox = ImportSCEContext():GetEMessageBox()
end

local argv = include '@common.base.argv'
local showMessageBoxWhenError = true
if argv.has('debug') or argv.has('lua_debug') then
    showMessageBoxWhenError = false
end
local message_box = require '@base.base.message_box'

local log_warn = log.warn
local log_debug = log.debug
local log_error = log.error
local log_info = log.info
local log_alert = log.alert

---@param f string
local function fmt(f, ...)
    return f:format(...)
end

_G.fmt = fmt

if not log.debugf then
    function log.debugf(fmt, ...)
        if select('#', ...) == 0 then
            return log_debug(fmt)
        end
        return log_debug((fmt):format(...))
    end

    function log.infof(fmt, ...)
        if select('#', ...) == 0 then
            return log_info(fmt)
        end
        return log_info((fmt):format(...))
    end

    function log.warnf(fmt, ...)
        if select('#', ...) == 0 then
            return log_warn(fmt)
        end
        return log_warn((fmt):format(...))
    end

    function log.errorf(fmt, ...)
        if select('#', ...) == 0 then
            return log_error(fmt)
        end
        return log_error((fmt):format(...))
    end
end

if __lua_state_name == 'StateEditor' and showMessageBoxWhenError then
    function log.error(...)
        local str = tostring(...)
        log.info("[error] " .. str)
        log.info(debug.traceback())
        message_box({
            content = "Lua运行错误，请尝试重启编辑器。\r\n" .. str,
            title = '错误',
            btn_text = '我知道了'
        })
    end
end

function log.alertf(fmt, ...)
    if select('#', ...) == 0 then
        return log_alert(fmt)
    end
    return log_alert((fmt):format(...))
end

function log.fail(info)
    if EMessageBox then
        log.info("[fail] " .. info)
        EMessageBox:begin(info)
    else
        log.error(info)
    end
end

function log.failf(fmt, ...)
    if select('#', ...) == 0 then
        return log.fail(fmt)
    end
    return log.fail((fmt):format(...))
end

local print = print
_G.printf = function(fmt, ...)
    if select('#', ...) == 0 then
        return print(fmt)
    end
    return print((fmt):format(...))
end

log.traceback_debug_bp = function(...)
    if debug_bp then
        debug_bp()
    end
end


-- log_file挪到C++了，这里只是做个兼容
if not _G.log_file then
    _G.log_file = log
end
