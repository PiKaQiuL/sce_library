---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xindong.
--- DateTime: 2021/2/7 21:36
---

local math_type = math.type
local table_insert = table.insert
local table_remove = table.remove

-- 删除坐标在给定作用域中的table的所有nil值, 且使得相同元素只保留最多一个数据
-- 本算法不需要table处于已排序状态
function table.unique(t, i, j)
    i = i or 1
    j = j or #t
    local m = {}
    local step = i < j and -1 or 1
    for x = i, j, step do
        if t[x] ~= nil then
            if m[t[x]] ~= true then
                m[t[x]] = true
            else
                t[x] = nil
            end
        end
    end


    local move_count = 0
    i, j = math.min_max(i, j)
    for x = i, j do
        if t[x] ~= nil then
            if move_count > 0 then
                t[x - move_count] = t[x]
                t[x] = nil
            end
        else
            move_count = move_count + 1
        end
    end
end

local function table_merge(dst, src, array_append, depth)
    depth = depth or 1  -- 默认merge表层
    if array_append then
        for i = 1, #src do
            table_insert(dst, src[i])
        end
    end

    for k, v in pairs(src) do
        if not array_append or math_type(k) ~= 'integer' then
            if depth ~= 1 and type(v) == 'table' and type(dst[k]) == 'table' then
                table_merge(dst[k], v, depth - 1)
            else
                dst[k] = v
            end
        end
    end
end
table.merge = table_merge

table.erase = function(t, func_or_elem, start, stop)
    start = start or 1
    stop = stop or #t
    if type(func_or_elem) == 'function' then
        for i = stop, start, -1 do
            if func_or_elem(t[i]) then
                table_remove(t, i)
            end
        end
    else
        for i = stop, start, -1 do
            if func_or_elem == t[i] then
                table_remove(t, i)
            end
        end
    end
end

function math.min_max(a, b)
    if a <= b then
        return a, b
    else
        return b, a
    end
end

function math.max_min(a, b)
    if a >= b then
        return a, b
    else
        return b, a
    end
end

