---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by XINDONG.
--- DateTime: 2022/6/10 15:34
---

require 'json'
local create_queue = require 'base.deque'.create_queue
local json = _G.json

local coroutine_call = coroutine.call
local io_read = io.read
local create_stream = sce.httplib.create_stream
local http_request = sce.httplib.request
local sleep = coroutine.sleep
local table_insert = table.insert
local ipairs = ipairs
local coroutine_async = coroutine.async
local coroutine_as_promise = coroutine.as_promise
local print = print
local os_date = os.date
local fmt = fmt
local io_get_root_dir = io.get_root_dir
local common_utc_time = common.utc_time

---@return string
local function download_from_url(url, need_content, filename)
    while true do
        local output
        if need_content then
            output = create_stream()
        elseif filename then
            output = filename
        end
        local code, status = coroutine_call(http_request, {
            url = url, output = output, method = 'get',
        })

        if code == 0 and status == 200 then
            return need_content and output:read() or nil
        end

        log_file.warn(('download url[%s] failed. code[%s] status[%s], retry it'):format(url, code, status))
        sleep(200)
    end
end

local download_speed = function(test_name_info)
    local thread_count = tonumber(test_name_info[2]) or 30

    local test_li = {
        { '10.0x10', 'http://weitest-1257933509.file.myqcloud.com/?/a.html', 1048562 },
        {'5.0x20', 'http://weitest-1257933509.file.myqcloud.com/?/a.html', 264703},
        {'5.0x20', 'http://weitest-1257933509.file.myqcloud.com/?/a.html', 105882},
        {'1.0x100', 'http://weitest-1257933509.file.myqcloud.com/v3_?/a.html', 52943},
        {'0.5x200', 'http://weitest-1257933509.file.myqcloud.com/v3_?/a.html', 26462},
        {'0.25x400', "http://weitest-1257933509.file.myqcloud.com/v3_?/a.html", 26462},
        {'0.1x1000', "http://weitest-1257933509.file.myqcloud.com/v3_?/a.html", 26462},
        {'0.05x2000', "http://weitest-1257933509.file.myqcloud.com/v4_?/a.html", 26462},
        {'0.025x4000', "http://weitest-1257933509.file.myqcloud.com/v4_?/a.html", 26462},
        {'0.01x10000', "http://weitest-1257933509.file.myqcloud.com/v1_?/a.html", 26462},
    }

    local all_test_list = {}

    for _, v in ipairs(test_li) do
        local url_template = v[2]  ---@type string
        local a_url = url_template:gsub('%?', v[1])
        local root_url = ''
        print(a_url)
        for i = #a_url, 1, -1 do
            local c = a_url:sub(i, i)
            if c == '/' then
                root_url = a_url:sub(1, i - 1)
                print('root_url:', root_url)
                break
            end
        end

        local a_url_content = download_from_url(a_url, true)
        local index = 1
        local to_download_url_list = {}
        while index < #a_url_content do
            local _, new_index, s = a_url_content:find('<script src="(%w+[.]js)">', index)
            if new_index == nil then
                break
            end

            index = new_index + 1
            table_insert(to_download_url_list, {root_url..'/'..s, io_get_root_dir()..'/unit_test/'..v[1]..'/'..s})
        end

        table_insert(all_test_list, {name = v[1], li = to_download_url_list})
    end

    local store_log = {}
    local log_info = function(s, store)
        log_file.info(s)
        if store then
            table_insert(store_log, s)
        end
    end

    log_info(fmt('thread_count: %s', thread_count))

    for _, v in ipairs(all_test_list) do
        local name = v.name
        local li = v.li

        local print_log = function(s, store)
            local now = os_date():sub(9)
            local str = fmt("[%s] [%s] %s", now, name, s)
            log_info(str, store)
        end

        local queue = create_queue()
        for _, tup in ipairs(li) do
            queue:push(tup)
        end

        local start_time = common_utc_time()

        local thread_pro_li = {}  ---@type promise[]
        local finish_count = 0
        local last_time = common_utc_time()

        for thead_id = 1, thread_count do
            local thread_pro = coroutine_as_promise(function()
                local thread_finish_count = 0
                while true do
                    if #queue == 0 then
                        break
                    end

                    local tup = queue:pop()
                    local url = tup[1]
                    local filename = tup[2] and nil
                    local _ = download_from_url(url, false, filename)
                    finish_count = finish_count + 1
                    thread_finish_count = thread_finish_count + 1
                    if finish_count % 100 == 0 then
                        print_log(fmt('finish: %s/%s, duration: %s', finish_count, #li, (common_utc_time() - last_time) / 1000.0))
                        last_time = common_utc_time()
                    end
                end

                print_log(fmt('thread[%s] exit. download count: %s', thead_id, thread_finish_count))
            end)

            table_insert(thread_pro_li, thread_pro)
        end

        for _, thread_pro in ipairs(thread_pro_li) do
            thread_pro:co_result()
        end

        print_log(fmt('duration: %s', (common_utc_time() - start_time) / 1000.0), true)
    end

    for _, str in ipairs(store_log) do
        log_info(str)
    end

    log_info('download_speed test all finish')
end

local function download_test1()
    download_from_url("https://sce-maps-develop.oss-cn-shanghai.aliyuncs.com/hahaha_kvqa/master/Version/Client/1.7z", false, 'D:/aaaa.7z')
end

env_test_dict.download_speed = download_speed
env_test_dict.download_test1 = download_test1